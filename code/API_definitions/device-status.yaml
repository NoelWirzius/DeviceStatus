openapi: 3.0.3
info:
  title: Device Status
  description: Service Enabling Network Function API for monitoring device status. This API allows to query device roaming status and subscribe to event related to device roaming status.
  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.5.0-wip
externalDocs:
  description: Product documentation at CAMARA
  url: https://github.com/camaraproject/
security:
#  - {}
  - oAuth2ClientCredentials: []
#  - BasicAuth: []
#  - apiKey: []
  - three_legged:
    - device-status-roaming-read
    - device-status-roaming-event
servers:
  - url: '{apiRoot}/{basePath}'
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
      basePath:
        default: /device-status/v0
        description: Base path for the device status API
tags:
  - name: Device roaming status
    description: Operation to get device roaming status and country information (if roaming) synchronously
  - name: Device status subscription
    description: Operation to manage subscription on device status event (roaming, connectivity)
  - name: Notification Callback
    description: |
      Notification received on subscription listener side. 
      
      **WARNING**: This endpoint must be exposed on the listener side as POST /notifications 
      will be posted by the Roaming resource server to the url provided by notification 
      listener.
paths:
  /notifications:
    post:
      tags:
        - Notification Callback
      summary: "Subscription notification callback"
      operationId: postNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notification"
            examples:
              ROAMING_STATUS:
                $ref: '#/components/examples/ROAMING_STATUS'  
              ROAMING_CHANGE_COUNTRY:
                $ref: '#/components/examples/ROAMING_CHANGE_COUNTRY' 
              ROAMING_ON:
                $ref: '#/components/examples/ROAMING_ON'
              ROAMING_OFF:
                $ref: '#/components/examples/ROAMING_OFF'
      responses:
        '204':
          description: No Content
        400:
          $ref: "#/components/responses/Generic400"
        401:
          $ref: "#/components/responses/Generic401"
        403:
          $ref: "#/components/responses/Generic403"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
        503:
          $ref: "#/components/responses/Generic503"
  /roaming:
    post:
      tags:
        - Device roaming status
      summary: 'Get the current roaming status and the country information'
      operationId: getRoamingStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestRoamingStatus'
        required: true
      responses:
        '200':
          description: Contains information about current roaming status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoamingStatusResponse'
              examples:
                No-Country-Code:
                  value:
                    roaming: true
                    countryCode: 901
                    countryName: []
                Single-Country-Code:
                  value:
                    roaming: true
                    countryCode: 262
                    countryName: ["DE"]
                Multiple-Country-Codes:
                  value:
                    roaming: true
                    countryCode: 340
                    countryName: [ "BL","GF","GP","MF","MQ" ]
        '400':
          $ref: "#/components/responses/Generic400"
        '401':
          $ref: "#/components/responses/Generic401"
        '403':
          $ref: "#/components/responses/Generic403"
        '404':
          $ref: "#/components/responses/Generic404"
        '500':
          $ref: "#/components/responses/Generic500"
        '503':
          $ref: "#/components/responses/Generic503"
  /event-subscriptions:
    post:
      tags:
        - Device status subscription
      summary: 'Create a device status subscription for a device'
      operationId: createDevicStatusSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotificationSubscription'
        required: true
      responses:
        '201':
          description: Created 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '409':
          $ref: '#/components/responses/Generic409'
        '500':
          $ref: '#/components/responses/Generic500'
        '503':
          $ref: '#/components/responses/Generic503'
    get:
      tags:
        - Device status subscription
      summary: 'Retrieve a list of device status subscription'
      operationId: retrieveSubscriptionList
      responses:
        '200':
          description: List of subscription details
          content:
            application/json:
              schema:
                type: array 
                items:
                  $ref: '#/components/schemas/SubscriptionInfo'
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '500':
          $ref: '#/components/responses/Generic500'
        '503':
          $ref: '#/components/responses/Generic503' 
  /event-subscriptions/{subscriptionId}:
    get:
      tags:
        - Device status subscription
      summary: 'Retrieve a device status subscription for a device'
      operationId: retrieveSubscription
      description: retrieve subscription information for a given subscription.
      parameters:
        - name: subscriptionId
          in: path
          description: subscription identifier that was obtained from the create subscription operation
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              examples:
                Generic400:
                  summary: Schema validation failed
                  value: 
                    code: INVALID_INPUT
                    status: 400
                    message: "Schema validation failed at  ..."
                subscriptionIdRequired:
                  summary: subscription id is required
                  value: 
                    code: INVALID_INPUT
                    status: 400
                    message: "Expected property is missing: subscriptionId"
        401:
          $ref: "#/components/responses/Generic401"
        403:
          $ref: "#/components/responses/Generic403"
        404:
          $ref: "#/components/responses/Generic404"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
        503:
          $ref: "#/components/responses/Generic503"
    delete:
      tags:
        - Device status subscription
      summary: 'Delete a device status subscription for a device'
      operationId: deleteSubscription
      description: delete a  given subscription.
      parameters:
        - name: subscriptionId
          in: path
          description: subscription identifier that was obtained from the create subscription operation
          required: true
          schema:
            type: string
      responses:
        200:
          description: subscription deleted
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              examples:
                Generic400:
                  summary: Schema validation failed
                  value: 
                    code: INVALID_INPUT
                    status: 400
                    message: "Schema validation failed at  ..."
                subscriptionIdRequired:
                  summary: subscription id is required
                  value: 
                    code: INVALID_INPUT
                    status: 400
                    message: "Expected property is missing: subscriptionId"
        401:
          $ref: "#/components/responses/Generic401"
        403:
          $ref: "#/components/responses/Generic403"
        404:
          $ref: "#/components/responses/Generic404"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
        503:
          $ref: "#/components/responses/Generic503"
components:
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: '{tokenUrl}'
          scopes: {}
#    BasicAuth:
#      type: http
#      scheme: basic
#    apiKey:
#      type: apiKey
#      description: API key to authorize requests
#      name: apikey
#      in: query
    three_legged:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/authorize
          tokenUrl: https://auth.example.com/token
          scopes:
            device-status-roaming-read: Read device roaming status
  schemas:
    RoamingStatusResponse:
      type: object
      required:
        - roaming
      properties:
        roaming:
          $ref: '#/components/schemas/ActiveRoaming'
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        countryName:
          $ref: '#/components/schemas/CountryName'
    
    ActiveRoaming:
      description: Roaming status. True, if it is roaming
      type: boolean
    
    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of devices include smartphones or IoT sensors/actuators. 

        The developer can choose to provide the below specified device identifiers:

        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`  

        NOTE: the MNO might support only a subset of these options. The API invoker can provide multiple identifiers to be compatible across different MNOs. In this case the identifiers MUST belong to the same device     
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/Ipv6Address"
      minProperties: 1
    NetworkAccessIdentifier:
      type: string
      example: '123456789@domain.com'
      description: A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.
    
    PhoneNumber:
      type: string
      pattern: '^\+?[0-9]{5,15}$'
      example: '123456789'
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, optionally prefixed with '+'.    
    
    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).
        
        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.
        
        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)
      
        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
            {
              "publicAddress": "84.125.93.10",
              "publicPort" : 59765
            }

    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      pattern: '^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
      example: "84.125.93.10"

    Ipv4Address:
      type: string
      pattern: '^([01]?\d\d?|2[0-4]\d|25[0-5])(?:\.(?:[01]?\d\d?|2[0-4]\d|25[0-5])){3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
      example: "192.168.0.1/24"
      description: |
        IPv4 address may be specified in form <address/mask> as:
          - address - an IPv4 number in dotted-quad form 1.2.3.4. Only this exact IP number will match the flow control rule.
          - address/mask - an IP number as above with a mask width of the form 1.2.3.4/24.
            In this case, all IP numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid for the IP version.
  
    Ipv6Address:
      type: string
      format: ipv6
      allOf:
        - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))(\/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))?$'
        - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))(\/.+)?$'
      example: '2001:db8:85a3:8d3:1319:8a2e:370:7344'
      description: |
        IPv6 address, following IETF 5952 format, may be specified in form <address/mask> as:
          - address - The /128 subnet is optional for single addresses:
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344/128
          - address/mask - an IP v6 number with a mask:
            - 2001:db8:85a3:8d3::0/64
            - 2001:db8:85a3:8d3::/64
    CountryCode:
      description: The Mobile country code (MCC) as an geographic region identifier for the country and the dependent areas.
      type: integer
    CountryName:
      description: The ISO 3166 ALPHA-2 country-codes of mapped to mobile country code(MCC). If there is mapping of one MCC to multiple countries, then we have list of countries. If there is no mapping of MCC to any country, then an empty array [] shall be returned..
      type: array
      items:
        type: string
    RequestRoamingStatus:
      type: object
      properties:
        device:
          $ref: '#/components/schemas/Device'
      required:
        - device
    Port:
      description: User equipment port. Device port may be required along with IP address to identify the target device
      type: integer
      minimum: 0
      maximum: 65535
      example: 5060
    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP response status code
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
    DeviceStatusEventType:
      description: Type of the event
      type: string
      enum:
        - ROAMING_STATUS
        - ROAMING_ON
        - ROAMING_OFF
        - ROAMING_CHANGE_COUNTRY
    DeviceStatusEventTypeList:
      description: List of Device Status Event Type
      type: array
      items:
        $ref: '#/components/schemas/DeviceStatusEventType'
      example: [ROAMING_STATUS]
    CreateSubscription:
      description: The request for creating a Device Status Subscription
      type: object
      required:
        - webhook
      properties:
        subscriptionDetail:
          $ref: '#/components/schemas/SubscriptionDetail'
        subscriptionExpireTime:
          type: string
          format: date-time
          example: 2023-01-17T13:18:23.682Z
          description: The subscription expiration time in date-time format.
        webhook:
          $ref: '#/components/schemas/Webhook'
    Webhook:
      description: Webhook information for event channel
      type: object
      required:
        - notificationUrl
      properties: 
        notificationUrl:
          type: string
          example: "https://application-server.com"
          description: Allows asynchronous delivery of device status related events
        notificationAuthToken:
          type: string
          example: "c8974e592c2fa383d4a3960714"
          description: Authentification token for callback API  
    SubscriptionDetail:
      description: The detail of the requested description
      type: object
      required:
        - eventType
      properties:
        device:
          $ref: '#/components/schemas/Device'
        eventType:
          $ref: '#/components/schemas/RoamingEventType'
    RoamingEventType:
      type: string
      description: |
        ROAMING_STATUS - Device status event triggered when the UE switch from roaming ON to roaming OFF and conversely

        ROAMING_ON - Device status event triggered when the UE switch from roaming OFF to roaming on

        ROAMING_OFF: Device status event triggered when the UE switch from roaming ON to roaming OFF

        ROAMING_CHANGE_COUNTRY: Device status event triggered when the UE in roaming change country code|
      enum:
        - ROAMING_STATUS
        - ROAMING_ON
        - ROAMING_OFF
        - ROAMING_CHANGE_COUNTRY
    CreateNotificationSubscription:
      allOf:
        - $ref: '#/components/schemas/CreateSubscription'
        - type: object
    SubscriptionInfo:
      description: Represents a device status subscription.
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateSubscription'
        - type: object
          properties:
            subscriptionId:
              $ref: '#/components/schemas/SubscriptionId'
            startsAt:
              type: string
              format: date-time
              description: date time when subscription started
            expiresAt:
              type: string
              format: date-time
              description: date time when subscription will expire or expired
          required:
            - subscriptionId
            - type
    SubscriptionId:
      type: string
      description: The subscription identifier.
    EventTime:
      format: date-time
      type: string
      description: The time when the event was notified.
    Notification:
      description: The notification callback.
      type: object
      required:
        - event
      properties:
        subscriptionId:
          $ref: '#/components/schemas/SubscriptionId'
        event: 
          $ref: '#/components/schemas/Event'
    Event: 
      description: Generic event structure
      oneOf:
        - $ref: '#/components/schemas/EventRoamingStatus'
        - $ref: '#/components/schemas/EventRoamingChange'
        - $ref: '#/components/schemas/EventChangeCountry'
      discriminator:
        propertyName: 'eventType'
        mapping:
          ROAMING_STATUS: '#/components/schemas/EventRoamingStatus'
          ROAMING_CHANGE_COUNTRY : '#/components/schemas/EventChangeCountry'
          ROAMING_OFF: '#/components/schemas/EventRoamingChange'
          ROAMING_ON: '#/components/schemas/EventRoamingChange'
    EventRoamingStatus:
      description:  event structure for roaming status change
      required:
        - eventType
        - eventTime
        - eventDetail
      properties:
        eventType:
          type: string
          enum: 
            - ROAMING_STATUS
        eventTime:
          $ref: '#/components/schemas/EventTime'
        eventDetail:
          $ref: '#/components/schemas/ROAMING_STATUS'
    EventRoamingChange:
      description:  event structure for roaming on and roaming off change
      required:
        - eventType
        - eventTime
        - eventDetail
      properties:
        eventType:
          type: string
          enum: 
            - ROAMING_ON
            - ROAMING_OFF
        eventTime:
          $ref: '#/components/schemas/EventTime'
        eventDetail:
          $ref: '#/components/schemas/ROAMING_CHANGE'
    EventChangeCountry:
      description:  event structure for roaming change country
      required:
        - eventType
        - eventTime
        - eventDetail
      properties:
        eventType:
          type: string
          enum: 
            - ROAMING_CHANGE_COUNTRY
        eventTime:
          $ref: '#/components/schemas/EventTime'
        eventDetail:
          $ref: '#/components/schemas/ROAMING_CHANGE_COUNTRY'  
    ROAMING_STATUS:
      description: Event detail structure for ROAMING_STATUS event
      type : object
      required:
        - device
        - roaming
      properties:
        device:
          $ref: '#/components/schemas/Device'
        roaming:
          type: boolean
          description:  Roaming status. True, if it is roaming.
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        countryName:
          $ref: '#/components/schemas/CountryName'
    ROAMING_CHANGE:
      description: Event detail structure for ROAMING_ON & ROAMING_OFF event
      type : object
      required:
        - device
      properties:
        device:
          $ref: '#/components/schemas/Device'
    ROAMING_CHANGE_COUNTRY:
      description: Event detail structure for ROAMING_CHANGE_COUNTRY event
      type : object
      required:
        - device
      properties:
        device:
          $ref: '#/components/schemas/Device'
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        countryName:
          $ref: '#/components/schemas/CountryName'
  responses:
    Generic400:
      description: Problem with the client request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 400
            code: "INVALID_ARGUMENT"
            message: "Client specified an invalid argument, request body or query param"
    Generic401:
      description: Authentication problem with the client request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 401
            code: "UNAUTHENTICATED"
            message: "Request not authenticated due to missing, invalid, or expired credentials"
    Generic403:
      description: Client does not have sufficient permission
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 403
            code: "PERMISSION_DENIED"
            message: "Client does not have sufficient permissions to perform this action"
    Generic404:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: NOT_FOUND
            message: "The specified resource is not found"
    Generic409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: CONFLICT
            message: "The specified resource is in a conflict"
    Generic500:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 500
            code: "INTERNAL"
            message: "Server error"
    Generic503:
      description: Service unavailable. Typically the server is down.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 503
            code: "UNAVAILABLE"
            message: "Service unavailable"
  examples:
    ROAMING_STATUS:
      value:
        subscriptionId: 123654
        event:
          eventType: ROAMING_STATUS
          eventTime: 2023-01-17T13:18:23.682Z
          eventDetail:
            device:
              phoneNumber: 123456789
            roaming: true
            countryCode: 208
            countryName: 
              FR 
    ROAMING_OFF:
      value:
        subscriptionId: 123655
        event:
          eventType: ROAMING_OFF
          eventTime: 2023-01-17T13:18:23.682Z
          eventDetail:
            device:
              phoneNumber: 123456789
    ROAMING_ON:
      value:
        subscriptionId: 123655
        event:
          eventType: ROAMING_ON
          eventTime: 2023-01-17T13:18:23.682Z
          eventDetail:
            device:
              phoneNumber: 123456789
    ROAMING_CHANGE_COUNTRY:
      value:
        subscriptionId: 123655
        event:
          eventType: ROAMING_CHANGE_COUNTRY
          eventTime: 2023-01-17T13:18:23.682Z
          eventDetail:
            device:
              phoneNumber: 123456789
            countryCode: 214
            countryName: 
              SP 
